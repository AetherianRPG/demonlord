{"_id":"01XhF99RNUqVwMiW","name":"Heal","permission":{"default":0,"Sd8TaawsSgOTEPU7":3},"type":"script","flags":{},"scope":"global","command":"// Heals the selected player token with Healing Rate or half Healing Rate.\r\n\r\nfunction applyHealing(token, fullHealingRate) {\r\n    const actor = token.actor;\r\n    let healed = 0;\r\n\r\n    if (token.data.actorData.data?.characteristics != undefined) {\r\n        let tokenData = duplicate(token.data);\r\n        let hp = tokenData.actorData.data.characteristics.health;\r\n        let rate = tokenData.actorData.data.characteristics.health.healingrate;\r\n\r\n        if (game.settings.get('demonlord', 'reverseDamage')) {\r\n            let newdamage = parseInt(hp.value) + (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\r\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\r\n            if (newdamage > hp.max) {\r\n                newdamage = parseInt(hp.max);\r\n                healed = newdamage - hp.max;\r\n            }\r\n            hp.value = newdamage;\r\n        } else {\r\n            let newdamage = parseInt(hp.value) - (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\r\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\r\n            if (newdamage < 0) {\r\n                newdamage = 0;\r\n                healed = parseInt(hp.value);\r\n            }\r\n\r\n            hp.value = newdamage;\r\n        }\r\n\r\n        token.update(tokenData);\r\n    } else {\r\n        let actorData = duplicate(token.actor.data);\r\n        let hp = actorData.data.characteristics.health;\r\n        let rate = actorData.data.characteristics.health.healingrate;\r\n\r\n        if (game.settings.get('demonlord', 'reverseDamage')) {\r\n            let newdamage = parseInt(hp.value) + (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\r\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\r\n            if (newdamage > hp.max) {\r\n                newdamage = parseInt(hp.max);\r\n                healed = newdamage - hp.max;\r\n            }\r\n            hp.value = newdamage;\r\n        } else {\r\n            let newdamage = parseInt(hp.value) - (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\r\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\r\n            if (newdamage < 0) {\r\n                newdamage = 0;\r\n                healed = parseInt(hp.value);\r\n            }\r\n\r\n            hp.value = newdamage;\r\n        }\r\n\r\n        token.actor.update(actorData);\r\n    }\r\n\r\n    var templateData = {\r\n        actor: actor,\r\n        data: {\r\n            healing: {\r\n                value: healed\r\n            }\r\n        }\r\n    };\r\n\r\n    let chatData = {\r\n        user: game.user._id,\r\n        speaker: {\r\n            actor: actor._id,\r\n            token: actor.token,\r\n            alias: actor.name\r\n        }\r\n    };\r\n\r\n    let template = 'systems/demonlord/templates/chat/heal.html';\r\n    renderTemplate(template, templateData).then(content => {\r\n        chatData.content = content;\r\n        ChatMessage.create(chatData);\r\n    });\r\n\r\n}\r\n\r\nlet applyChanges = false;\r\nnew Dialog({\r\n    title: `Heal`,\r\n    content: `\r\n    <form>\r\n      <div class=\"form-group\">\r\n        <label>Choose Healing:</label><br/>\r\n</div>\r\n<div class=\"form-group\">\r\n<table>\r\n<tr>\r\n<td>\r\n<input type=\"radio\" name=\"healingrate\" id=\"true\" checked />\r\n                        <label for=\"true\">Healing Rate</label>\r\n<td/>\r\n</tr>\r\n<tr>\r\n<td>\r\n<input type=\"radio\" name=\"healingrate\" id=\"false\" />\r\n                        <label for=\"false\">Half Healing Rate</label>\r\n<td/>\r\n</tr>\r\n</table>\r\n                        \r\n                        \r\n</div>\r\n    </form>\r\n    `,\r\n    buttons: {\r\n        yes: {\r\n            icon: \"<i class='fas fa-check'></i>\",\r\n            label: `Apply Healing`,\r\n            callback: () => applyChanges = true\r\n        },\r\n        no: {\r\n            icon: \"<i class='fas fa-times'></i>\",\r\n            label: `Cancel`\r\n        },\r\n    },\r\n    default: \"yes\",\r\n    close: html => {\r\n        if (applyChanges) {\r\n            for (let token of canvas.tokens.controlled) {\r\n                let fullHealingRate = html.find('[name=\"healingrate\"]')[0].checked || false;\r\n\r\n                applyHealing(token, fullHealingRate);\r\n            }\r\n        }\r\n    }\r\n}).render(true);","author":"Sd8TaawsSgOTEPU7","img":"systems/demonlord/icons/skills/heal.png","actorIds":[]}
{"_id":"5Bom3CgdNePXO8gj","name":"Perception Roll","permission":{"default":0,"Sd8TaawsSgOTEPU7":3},"type":"script","flags":{},"scope":"global","command":"// Select your token and execute to roll Perception Challenge Roll\r\ngame.demonlord.rollAttributeMacro(\"perception\");","author":"Sd8TaawsSgOTEPU7","img":"systems/demonlord/icons/skills/perception.png","actorIds":[]}
{"_id":"64PseoFypvhm8CAB","name":"Intellect Roll","permission":{"default":0,"Sd8TaawsSgOTEPU7":3},"type":"script","flags":{},"scope":"global","command":"// Select your token and execute to roll Intellect Challenge Roll\r\ngame.demonlord.rollAttributeMacro(\"intellect\");","author":"Sd8TaawsSgOTEPU7","img":"systems/demonlord/icons/skills/intellect.png","actorIds":[]}
{"_id":"95dWImeE0NQD0A1d","name":"Roll Initiative","permission":{"default":0,"Sd8TaawsSgOTEPU7":3},"type":"script","flags":{},"scope":"global","command":"// For player. Execute to choose Fast or Slow turn order.\r\n\r\ngame.demonlord.rollInitMacro();","author":"Sd8TaawsSgOTEPU7","img":"icons/svg/d20-highlight.svg","actorIds":[]}
{"_id":"EpDNdwKLSf8dqkmm","name":"Strength Roll","permission":{"default":0,"Sd8TaawsSgOTEPU7":3},"type":"script","flags":{},"scope":"global","command":"// Select your token and execute to roll Strength Challenge Roll\ngame.demonlord.rollAttributeMacro(\"strength\");","author":"Sd8TaawsSgOTEPU7","img":"systems/demonlord/icons/skills/strength.png","actorIds":[]}
{"_id":"SRjQKReHFabSgwKL","name":"Agility Roll","permission":{"default":0,"Sd8TaawsSgOTEPU7":3},"type":"script","flags":{},"scope":"global","command":"// Select your token and execute to roll Agility Challenge Roll\ngame.demonlord.rollAttributeMacro(\"agility\");","author":"Sd8TaawsSgOTEPU7","img":"systems/demonlord/icons/skills/agility.png","actorIds":[]}
{"_id":"bqWQeb7LGa0whHQD","name":"Rest","permission":{"default":0,"Sd8TaawsSgOTEPU7":3},"type":"script","flags":{},"scope":"global","command":"// Rest Actor. Resets all uses on Talent, Spells and heals you for your Healing Rate.\r\n\r\nfunction restActor(token) {\r\n    const actor = token.actor;\r\n\r\n    // Talents\r\n    const talents = actor.getEmbeddedCollection(\"OwnedItem\").filter(e => \"talent\" === e.type)\r\n\r\n    for (let talent of talents) {\r\n        const item = duplicate(actor.getEmbeddedEntity(\"OwnedItem\", talent._id))\r\n        item.data.uses.value = 0;\r\n\r\n        actor.updateEmbeddedEntity(\"OwnedItem\", item);\r\n    }\r\n\r\n    // Spells\r\n    const spells = actor.getEmbeddedCollection(\"OwnedItem\").filter(e => \"spell\" === e.type)\r\n\r\n    for (let spell of spells) {\r\n        const item = duplicate(actor.getEmbeddedEntity(\"OwnedItem\", spell._id))\r\n\r\n        item.data.castings.value = 0;\r\n\r\n        actor.updateEmbeddedEntity(\"OwnedItem\", item);\r\n    }\r\n\r\n    applyHealing(token, true);\r\n\r\n    var templateData = {\r\n        actor: actor\r\n    };\r\n\r\n    let chatData = {\r\n        user: game.user._id,\r\n        speaker: {\r\n            actor: actor._id,\r\n            token: actor.token,\r\n            alias: actor.name\r\n        }\r\n    };\r\n\r\n    let template = 'systems/demonlord/templates/chat/rest.html';\r\n    renderTemplate(template, templateData).then(content => {\r\n        chatData.content = content;\r\n        ChatMessage.create(chatData);\r\n    });\r\n}\r\n\r\nfunction applyHealing(token, fullHealingRate) {\r\n    const actor = token.actor;\r\n\r\n    if (token.data.actorData.data?.characteristics != undefined) {\r\n        let tokenData = duplicate(token.data);\r\n        let hp = tokenData.actorData.data.characteristics.health;\r\n        let rate = tokenData.actorData.data.characteristics.health.healingrate;\r\n\r\n        if (game.settings.get('demonlord', 'reverseDamage')) {\r\n            let newdamage = parseInt(hp.value) + (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\r\n            if (newdamage > hp.max)\r\n                newdamage = parseInt(hp.max);\r\n\r\n            hp.value = newdamage;\r\n        } else {\r\n            let newdamage = parseInt(hp.value) - (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\r\n            if (newdamage < 0)\r\n                newdamage = 0;\r\n\r\n            hp.value = newdamage;\r\n        }\r\n\r\n        token.update(tokenData);\r\n    } else {\r\n        let actorData = duplicate(token.actor.data);\r\n        let hp = actorData.data.characteristics.health;\r\n        let rate = actorData.data.characteristics.health.healingrate;\r\n\r\n        if (game.settings.get('demonlord', 'reverseDamage')) {\r\n            let newdamage = parseInt(hp.value) + (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\r\n            if (newdamage > hp.max)\r\n                newdamage = parseInt(hp.max);\r\n\r\n            hp.value = newdamage;\r\n        } else {\r\n            let newdamage = parseInt(hp.value) - (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\r\n            if (newdamage < 0)\r\n                newdamage = 0;\r\n\r\n            hp.value = newdamage;\r\n        }\r\n\r\n        token.actor.update(actorData);\r\n    }\r\n}\r\n\r\nfor (let token of canvas.tokens.controlled) {\r\n    restActor(token);\r\n}","author":"Sd8TaawsSgOTEPU7","img":"systems/demonlord/icons/skills/time.png","actorIds":[]}
{"_id":"qukXqHLYYWZZ63Qx","name":"Will Roll","permission":{"default":0,"Sd8TaawsSgOTEPU7":3},"type":"script","flags":{},"scope":"global","command":"// Select your token and execute to roll Will Challenge Roll\r\ngame.demonlord.rollAttributeMacro(\"will\");","author":"Sd8TaawsSgOTEPU7","img":"systems/demonlord/icons/skills/will.png","actorIds":[]}
{"_id":"01XhF99RNUqVwMiW","name":"Heal","permission":{"default":0,"Sd8TaawsSgOTEPU7":3},"type":"script","flags":{},"scope":"global","command":"// Heals the selected player token with Healing Rate or half Healing Rate.\n\nfunction applyHealing(token, fullHealingRate) {\n    const actor = token.actor;\n    let healed = 0;\n\n    if (token.data.actorData.data?.characteristics != undefined) {\n        let tokenData = duplicate(token.data);\n        let hp = tokenData.actorData.data.characteristics.health;\n        let rate = tokenData.actorData.data.characteristics.health.healingrate;\n\n        if (game.settings.get('demonlord', 'reverseDamage')) {\n            let newdamage = parseInt(hp.value) + (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage > hp.max) {\n                newdamage = parseInt(hp.max);\n                healed = newdamage - hp.max;\n            }\n            hp.value = newdamage;\n        } else {\n            let newdamage = parseInt(hp.value) - (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage < 0) {\n                newdamage = 0;\n                healed = parseInt(hp.value);\n            }\n\n            hp.value = newdamage;\n        }\n\n        token.update(tokenData);\n    } else {\n        let actorData = duplicate(token.actor.data);\n        let hp = actorData.data.characteristics.health;\n        let rate = actorData.data.characteristics.health.healingrate;\n\n        if (game.settings.get('demonlord', 'reverseDamage')) {\n            let newdamage = parseInt(hp.value) + (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage > hp.max) {\n                newdamage = parseInt(hp.max);\n                healed = newdamage - hp.max;\n            }\n            hp.value = newdamage;\n        } else {\n            let newdamage = parseInt(hp.value) - (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage < 0) {\n                newdamage = 0;\n                healed = parseInt(hp.value);\n            }\n\n            hp.value = newdamage;\n        }\n\n        token.actor.update(actorData);\n    }\n\n    var templateData = {\n        actor: actor,\n        data: {\n            healing: {\n                value: healed\n            }\n        }\n    };\n\n    let chatData = {\n        user: game.user._id,\n        speaker: {\n            actor: actor._id,\n            token: actor.token,\n            alias: actor.name\n        }\n    };\n\n    let template = 'systems/demonlord/templates/chat/heal.html';\n    renderTemplate(template, templateData).then(content => {\n        chatData.content = content;\n        ChatMessage.create(chatData);\n    });\n\n}\n\nlet applyChanges = false;\nnew Dialog({\n    title: `Heal`,\n    content: `\n    <form>\n      <div class=\"form-group\">\n        <label>Choose Healing:</label><br/>\n</div>\n<div class=\"form-group\">\n<table>\n<tr>\n<td>\n<input type=\"radio\" name=\"healingrate\" id=\"true\" checked />\n                        <label for=\"true\">` + game.i18n.localize('DL.MacroHealHealingRate') + `</label>\n<td/>\n</tr>\n<tr>\n<td>\n<input type=\"radio\" name=\"healingrate\" id=\"false\" />\n                        <label for=\"false\">` + game.i18n.localize('DL.MacroHealHalfHealingRate') + `</label>\n<td/>\n</tr>\n</table>\n                        \n                        \n</div>\n    </form>\n    `,\n    buttons: {\n        yes: {\n            icon: \"<i class='fas fa-check'></i>\",\n            label: game.i18n.localize('DL.MacroHealApplyHealing'),\n            callback: () => applyChanges = true\n        },\n        no: {\n            icon: \"<i class='fas fa-times'></i>\",\n            label: game.i18n.localize('DL.MacroCancel')\n        },\n    },\n    default: \"yes\",\n    close: html => {\n        if (applyChanges) {\n            for (let token of canvas.tokens.controlled) {\n                let fullHealingRate = html.find('[name=\"healingrate\"]')[0].checked || false;\n\n                applyHealing(token, fullHealingRate);\n            }\n        }\n    }\n}).render(true);","author":"Sd8TaawsSgOTEPU7","img":"systems/demonlord/icons/skills/heal.png","actorIds":[]}
{"_id":"01XhF99RNUqVwMiW","name":"Heal","permission":{"default":0,"Sd8TaawsSgOTEPU7":3},"type":"script","flags":{},"scope":"global","command":"// Heals the selected player token with Healing Rate or half Healing Rate.\n\nfunction applyHealing(token, fullHealingRate) {\n    const actor = token.actor;\n    let healed = 0;\n\n    if (token.data.actorData.data?.characteristics != undefined) {\n        let tokenData = duplicate(token.data);\n        let hp = tokenData.actorData.data.characteristics.health;\n        let rate = tokenData.actorData.data.characteristics.health.healingrate;\n\n        if (game.settings.get('demonlord', 'reverseDamage')) {\n            let newdamage = parseInt(hp.value) + (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage > hp.max) {\n                newdamage = parseInt(hp.max);\n                healed = newdamage - hp.max;\n            }\n            hp.value = newdamage;\n        } else {\n            let newdamage = parseInt(hp.value) - (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage < 0) {\n                newdamage = 0;\n                healed = parseInt(hp.value);\n            }\n\n            hp.value = newdamage;\n        }\n\n        token.update(tokenData);\n    } else {\n        let actorData = duplicate(token.actor.data);\n        let hp = actorData.data.characteristics.health;\n        let rate = actorData.data.characteristics.health.healingrate;\n\n        if (game.settings.get('demonlord', 'reverseDamage')) {\n            let newdamage = parseInt(hp.value) + (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage > hp.max) {\n                newdamage = parseInt(hp.max);\n                healed = newdamage - hp.max;\n            }\n            hp.value = newdamage;\n        } else {\n            let newdamage = parseInt(hp.value) - (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage < 0) {\n                newdamage = 0;\n                healed = parseInt(hp.value);\n            }\n\n            hp.value = newdamage;\n        }\n\n        token.actor.update(actorData);\n    }\n\n    var templateData = {\n        actor: actor,\n        data: {\n            healing: {\n                value: healed\n            }\n        }\n    };\n\n    let chatData = {\n        user: game.user._id,\n        speaker: {\n            actor: actor._id,\n            token: actor.token,\n            alias: actor.name\n        }\n    };\n\n    let template = 'systems/demonlord/templates/chat/heal.html';\n    renderTemplate(template, templateData).then(content => {\n        chatData.content = content;\n        ChatMessage.create(chatData);\n    });\n\n}\n\nlet applyChanges = false;\nnew Dialog({\n    title: `Heal`,\n    content: `\n    <form>\n      <div class=\"form-group\">\n        <label>Choose Healing:</label><br/>\n</div>\n<div class=\"form-group\">\n<table>\n<tr>\n<td>\n<input type=\"radio\" name=\"healingrate\" id=\"true\" checked />\n                        <label for=\"true\">` + game.i18n.localize('DL.MacroHealHealingRate') + `</label>\n<td/>\n</tr>\n<tr>\n<td>\n<input type=\"radio\" name=\"healingrate\" id=\"false\" />\n                        <label for=\"false\">` + game.i18n.localize('DL.MacroHealHalfHealingRate') + `</label>\n<td/>\n</tr>\n</table>\n                        \n                        \n</div>\n    </form>\n    `,\n    buttons: {\n        yes: {\n            icon: \"<i class='fas fa-check'></i>\",\n            label: game.i18n.localize('DL.MacroHealApplyHealing'),\n            callback: () => applyChanges = true\n        },\n        no: {\n            icon: \"<i class='fas fa-times'></i>\",\n            label: game.i18n.localize('DL.MacroCancel')\n        },\n    },\n    default: \"yes\",\n    close: html => {\n        if (applyChanges) {\n            for (let token of canvas.tokens.controlled) {\n                let fullHealingRate = html.find('[name=\"healingrate\"]')[0].checked || false;\n\n                applyHealing(token, fullHealingRate);\n            }\n        }\n    }\n}).render(true);","author":"Sd8TaawsSgOTEPU7","img":"systems/demonlord/icons/skills/heal.png","actorIds":[]}
{"_id":"01XhF99RNUqVwMiW","name":"Heal","permission":{"default":0,"Sd8TaawsSgOTEPU7":3},"type":"script","flags":{},"scope":"global","command":"// Heals the selected player token with Healing Rate or half Healing Rate.\n\nfunction applyHealing(token, fullHealingRate) {\n    const actor = token.actor;\n    let healed = 0;\n\n    if (token.data.actorData.data?.characteristics != undefined) {\n        let tokenData = duplicate(token.data);\n        let hp = tokenData.actorData.data.characteristics.health;\n        let rate = tokenData.actorData.data.characteristics.health.healingrate;\n\n        if (game.settings.get('demonlord', 'reverseDamage')) {\n            let newdamage = parseInt(hp.value) + (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage > hp.max) {\n                newdamage = parseInt(hp.max);\n                healed = newdamage - hp.max;\n            }\n            hp.value = newdamage;\n        } else {\n            let newdamage = parseInt(hp.value) - (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage < 0) {\n                newdamage = 0;\n                healed = parseInt(hp.value);\n            }\n\n            hp.value = newdamage;\n        }\n\n        token.update(tokenData);\n    } else {\n        let actorData = duplicate(token.actor.data);\n        let hp = actorData.data.characteristics.health;\n        let rate = actorData.data.characteristics.health.healingrate;\n\n        if (game.settings.get('demonlord', 'reverseDamage')) {\n            let newdamage = parseInt(hp.value) + (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage > hp.max) {\n                newdamage = parseInt(hp.max);\n                healed = newdamage - hp.max;\n            }\n            hp.value = newdamage;\n        } else {\n            let newdamage = parseInt(hp.value) - (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage < 0) {\n                newdamage = 0;\n                healed = parseInt(hp.value);\n            }\n\n            hp.value = newdamage;\n        }\n\n        token.actor.update(actorData);\n    }\n\n    var templateData = {\n        actor: actor,\n        data: {\n            healing: {\n                value: healed\n            }\n        }\n    };\n\n    let chatData = {\n        user: game.user._id,\n        speaker: {\n            actor: actor._id,\n            token: actor.token,\n            alias: actor.name\n        }\n    };\n\n    let template = 'systems/demonlord/templates/chat/heal.html';\n    renderTemplate(template, templateData).then(content => {\n        chatData.content = content;\n        ChatMessage.create(chatData);\n    });\n\n}\n\nlet applyChanges = false;\nnew Dialog({\n    title: `Heal`,\n    content: `\n    <form>\n      <div class=\"form-group\">\n        <label>Choose Healing:</label><br/>\n</div>\n<div class=\"form-group\">\n<table>\n<tr>\n<td>\n<input type=\"radio\" name=\"healingrate\" id=\"true\" checked />\n                        <label for=\"true\">` + game.i18n.localize('DL.MacroHealHealingRate') + `</label>\n<td/>\n</tr>\n<tr>\n<td>\n<input type=\"radio\" name=\"healingrate\" id=\"false\" />\n                        <label for=\"false\">` + game.i18n.localize('DL.MacroHealHalfHealingRate') + `</label>\n<td/>\n</tr>\n</table>\n                        \n                        \n</div>\n    </form>\n    `,\n    buttons: {\n        yes: {\n            icon: \"<i class='fas fa-check'></i>\",\n            label: game.i18n.localize('DL.MacroHealApplyHealing'),\n            callback: () => applyChanges = true\n        },\n        no: {\n            icon: \"<i class='fas fa-times'></i>\",\n            label: game.i18n.localize('DL.MacroCancel')\n        },\n    },\n    default: \"yes\",\n    close: html => {\n        if (applyChanges) {\n            for (let token of canvas.tokens.controlled) {\n                let fullHealingRate = html.find('[name=\"healingrate\"]')[0].checked || false;\n\n                applyHealing(token, fullHealingRate);\n            }\n        }\n    }\n}).render(true);","author":"Sd8TaawsSgOTEPU7","img":"systems/demonlord/icons/skills/heal.png","actorIds":[]}
{"_id":"01XhF99RNUqVwMiW","name":"Heal","permission":{"default":0,"Sd8TaawsSgOTEPU7":3},"type":"script","flags":{},"scope":"global","command":"// Heals the selected player token with Healing Rate or half Healing Rate.\n\nfunction applyHealing(token, fullHealingRate) {\n    const actor = token.actor;\n    let healed = 0;\n\n    if (token.data.actorData.data?.characteristics != undefined) {\n        let tokenData = duplicate(token.data);\n        let hp = tokenData.actorData.data.characteristics.health;\n        let rate = tokenData.actorData.data.characteristics.health.healingrate;\n\n        if (game.settings.get('demonlord', 'reverseDamage')) {\n            let newdamage = parseInt(hp.value) + (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage > hp.max) {\n                newdamage = parseInt(hp.max);\n                healed = newdamage - hp.max;\n            }\n            hp.value = newdamage;\n        } else {\n            let newdamage = parseInt(hp.value) - (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage < 0) {\n                newdamage = 0;\n                healed = parseInt(hp.value);\n            }\n\n            hp.value = newdamage;\n        }\n\n        token.update(tokenData);\n    } else {\n        let actorData = duplicate(token.actor.data);\n        let hp = actorData.data.characteristics.health;\n        let rate = actorData.data.characteristics.health.healingrate;\n\n        if (game.settings.get('demonlord', 'reverseDamage')) {\n            let newdamage = parseInt(hp.value) + (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage > hp.max) {\n                newdamage = parseInt(hp.max);\n                healed = newdamage - hp.max;\n            }\n            hp.value = newdamage;\n        } else {\n            let newdamage = parseInt(hp.value) - (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage < 0) {\n                newdamage = 0;\n                healed = parseInt(hp.value);\n            }\n\n            hp.value = newdamage;\n        }\n\n        token.actor.update(actorData);\n    }\n\n    var templateData = {\n        actor: actor,\n        data: {\n            healing: {\n                value: healed\n            }\n        }\n    };\n\n    let chatData = {\n        user: game.user._id,\n        speaker: {\n            actor: actor._id,\n            token: actor.token,\n            alias: actor.name\n        }\n    };\n\n    let template = 'systems/demonlord/templates/chat/heal.html';\n    renderTemplate(template, templateData).then(content => {\n        chatData.content = content;\n        ChatMessage.create(chatData);\n    });\n\n}\n\nlet applyChanges = false;\nnew Dialog({\n    title: `Heal`,\n    content: `\n    <form>\n      <div class=\"form-group\">\n        <label>` + game.i18n.localize('DL.MacroHealChoose')+ `</label><br/>\n</div>\n<div class=\"form-group\">\n<table>\n<tr>\n<td>\n<input type=\"radio\" name=\"healingrate\" id=\"true\" checked />\n                        <label for=\"true\">` + game.i18n.localize('DL.MacroHealHealingRate') + `</label>\n<td/>\n</tr>\n<tr>\n<td>\n<input type=\"radio\" name=\"healingrate\" id=\"false\" />\n                        <label for=\"false\">` + game.i18n.localize('DL.MacroHealHalfHealingRate') + `</label>\n<td/>\n</tr>\n</table>\n                        \n                        \n</div>\n    </form>\n    `,\n    buttons: {\n        yes: {\n            icon: \"<i class='fas fa-check'></i>\",\n            label: game.i18n.localize('DL.MacroHealApplyHealing'),\n            callback: () => applyChanges = true\n        },\n        no: {\n            icon: \"<i class='fas fa-times'></i>\",\n            label: game.i18n.localize('DL.MacroCancel')\n        },\n    },\n    default: \"yes\",\n    close: html => {\n        if (applyChanges) {\n            for (let token of canvas.tokens.controlled) {\n                let fullHealingRate = html.find('[name=\"healingrate\"]')[0].checked || false;\n\n                applyHealing(token, fullHealingRate);\n            }\n        }\n    }\n}).render(true);","author":"Sd8TaawsSgOTEPU7","img":"systems/demonlord/icons/skills/heal.png","actorIds":[]}
{"_id":"01XhF99RNUqVwMiW","name":"Heal","permission":{"default":0,"Sd8TaawsSgOTEPU7":3},"type":"script","flags":{},"scope":"global","command":"// Heals the selected player token with Healing Rate or half Healing Rate.\n\nfunction applyHealing(token, fullHealingRate) {\n    const actor = token.actor;\n    let healed = 0;\n\n    if (token.data.actorData.data?.characteristics != undefined) {\n        let tokenData = duplicate(token.data);\n        let hp = tokenData.actorData.data.characteristics.health;\n        let rate = tokenData.actorData.data.characteristics.health.healingrate;\n\n        if (game.settings.get('demonlord', 'reverseDamage')) {\n            let newdamage = parseInt(hp.value) + (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage > hp.max) {\n                newdamage = parseInt(hp.max);\n                healed = newdamage - hp.max;\n            }\n            hp.value = newdamage;\n        } else {\n            let newdamage = parseInt(hp.value) - (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage < 0) {\n                newdamage = 0;\n                healed = parseInt(hp.value);\n            }\n\n            hp.value = newdamage;\n        }\n\n        token.update(tokenData);\n    } else {\n        let actorData = duplicate(token.actor.data);\n        let hp = actorData.data.characteristics.health;\n        let rate = actorData.data.characteristics.health.healingrate;\n\n        if (game.settings.get('demonlord', 'reverseDamage')) {\n            let newdamage = parseInt(hp.value) + (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage > hp.max) {\n                newdamage = parseInt(hp.max);\n                healed = newdamage - hp.max;\n            }\n            hp.value = newdamage;\n        } else {\n            let newdamage = parseInt(hp.value) - (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage < 0) {\n                newdamage = 0;\n                healed = parseInt(hp.value);\n            }\n\n            hp.value = newdamage;\n        }\n\n        token.actor.update(actorData);\n    }\n\n    var templateData = {\n        actor: actor,\n        data: {\n            healing: {\n                value: healed\n            }\n        }\n    };\n\n    let chatData = {\n        user: game.user._id,\n        speaker: {\n            actor: actor._id,\n            token: actor.token,\n            alias: actor.name\n        }\n    };\n\n    let template = 'systems/demonlord/templates/chat/heal.html';\n    renderTemplate(template, templateData).then(content => {\n        chatData.content = content;\n        ChatMessage.create(chatData);\n    });\n\n}\n\nlet applyChanges = false;\nnew Dialog({\n    title: `Heal`,\n    content: `\n    <form>\n      <div class=\"form-group\">\n        <label>` + game.i18n.localize('DL.MacroHealChoose')+ `</label><br/>\n</div>\n<div class=\"form-group\">\n<table>\n<tr>\n<td>\n<input type=\"radio\" name=\"healingrate\" id=\"true\" checked />\n                        <label for=\"true\">` + game.i18n.localize('DL.MacroHealHealingRate') + `</label>\n<td/>\n</tr>\n<tr>\n<td>\n<input type=\"radio\" name=\"healingrate\" id=\"false\" />\n                        <label for=\"false\">` + game.i18n.localize('DL.MacroHealHalfHealingRate') + `</label>\n<td/>\n</tr>\n</table>\n                        \n                        \n</div>\n    </form>\n    `,\n    buttons: {\n        yes: {\n            icon: \"<i class='fas fa-check'></i>\",\n            label: game.i18n.localize('DL.MacroHealApplyHealing'),\n            callback: () => applyChanges = true\n        },\n        no: {\n            icon: \"<i class='fas fa-times'></i>\",\n            label: game.i18n.localize('DL.MacroCancel')\n        },\n    },\n    default: \"yes\",\n    close: html => {\n        if (applyChanges) {\n            for (let token of canvas.tokens.controlled) {\n                let fullHealingRate = html.find('[name=\"healingrate\"]')[0].checked || false;\n\n                applyHealing(token, fullHealingRate);\n            }\n        }\n    }\n}).render(true);","author":"Sd8TaawsSgOTEPU7","img":"systems/demonlord/icons/skills/heal.png","actorIds":[]}
{"_id":"01XhF99RNUqVwMiW","name":"Heal","permission":{"default":0,"Sd8TaawsSgOTEPU7":3},"type":"script","flags":{},"scope":"global","command":"// Heals the selected player token with Healing Rate or half Healing Rate.\n\nfunction applyHealing(token, fullHealingRate) {\n    const actor = token.actor;\n    let healed = 0;\n\n    if (token.data.actorData.data?.characteristics != undefined) {\n        let tokenData = duplicate(token.data);\n        let hp = tokenData.actorData.data.characteristics.health;\n        let rate = tokenData.actorData.data.characteristics.health.healingrate;\n\n        if (game.settings.get('demonlord', 'reverseDamage')) {\n            let newdamage = parseInt(hp.value) + (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage > hp.max) {\n                newdamage = parseInt(hp.max);\n                healed = newdamage - hp.max;\n            }\n            hp.value = newdamage;\n        } else {\n            let newdamage = parseInt(hp.value) - (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage < 0) {\n                newdamage = 0;\n                healed = parseInt(hp.value);\n            }\n\n            hp.value = newdamage;\n        }\n\n        token.update(tokenData);\n    } else {\n        let actorData = duplicate(token.actor.data);\n        let hp = actorData.data.characteristics.health;\n        let rate = actorData.data.characteristics.health.healingrate;\n\n        if (game.settings.get('demonlord', 'reverseDamage')) {\n            let newdamage = parseInt(hp.value) + (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage > hp.max) {\n                newdamage = parseInt(hp.max);\n                healed = newdamage - hp.max;\n            }\n            hp.value = newdamage;\n        } else {\n            let newdamage = parseInt(hp.value) - (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage < 0) {\n                newdamage = 0;\n                healed = parseInt(hp.value);\n            }\n\n            hp.value = newdamage;\n        }\n\n        token.actor.update(actorData);\n    }\n\n    var templateData = {\n        actor: actor,\n        data: {\n            healing: {\n                value: healed\n            }\n        }\n    };\n\n    let chatData = {\n        user: game.user._id,\n        speaker: {\n            actor: actor._id,\n            token: actor.token,\n            alias: actor.name\n        }\n    };\n\n    let template = 'systems/demonlord/templates/chat/heal.html';\n    renderTemplate(template, templateData).then(content => {\n        chatData.content = content;\n        ChatMessage.create(chatData);\n    });\n\n}\n\nlet applyChanges = false;\nnew Dialog({\n    title: game.i18n.localize('DL.MacroHealTitle'),\n    content: `\n    <form>\n      <div class=\"form-group\">\n        <label>` + game.i18n.localize('DL.MacroHealChoose') + `</label><br/>\n</div>\n<div class=\"form-group\">\n<table>\n<tr>\n<td>\n<input type=\"radio\" name=\"healingrate\" id=\"true\" checked />\n                        <label for=\"true\">` + game.i18n.localize('DL.MacroHealHealingRate') + `</label>\n<td/>\n</tr>\n<tr>\n<td>\n<input type=\"radio\" name=\"healingrate\" id=\"false\" />\n                        <label for=\"false\">` + game.i18n.localize('DL.MacroHealHalfHealingRate') + `</label>\n<td/>\n</tr>\n</table>\n                        \n                        \n</div>\n    </form>\n    `,\n    buttons: {\n        yes: {\n            icon: \"<i class='fas fa-check'></i>\",\n            label: game.i18n.localize('DL.MacroHealApplyHealing'),\n            callback: () => applyChanges = true\n        },\n        no: {\n            icon: \"<i class='fas fa-times'></i>\",\n            label: game.i18n.localize('DL.MacroCancel')\n        },\n    },\n    default: \"yes\",\n    close: html => {\n        if (applyChanges) {\n            for (let token of canvas.tokens.controlled) {\n                let fullHealingRate = html.find('[name=\"healingrate\"]')[0].checked || false;\n\n                applyHealing(token, fullHealingRate);\n            }\n        }\n    }\n}).render(true);","author":"Sd8TaawsSgOTEPU7","img":"systems/demonlord/icons/skills/heal.png","actorIds":[]}
{"_id":"bqWQeb7LGa0whHQD","name":"Rest","permission":{"default":0,"Sd8TaawsSgOTEPU7":3},"type":"script","flags":{},"scope":"global","command":"// Rest Actor. Resets all uses on Talent, Spells and heals you for your Healing Rate.\n\nfunction restActor(token) {\n    const actor = token.actor;\n\n    // Talents\n    const talents = actor.getEmbeddedCollection(\"OwnedItem\").filter(e => \"talent\" === e.type)\n\n    for (let talent of talents) {\n        const item = duplicate(actor.getEmbeddedEntity(\"OwnedItem\", talent._id))\n        item.data.uses.value = 0;\n\n        actor.updateEmbeddedEntity(\"OwnedItem\", item);\n    }\n\n    // Spells\n    const spells = actor.getEmbeddedCollection(\"OwnedItem\").filter(e => \"spell\" === e.type)\n\n    for (let spell of spells) {\n        const item = duplicate(actor.getEmbeddedEntity(\"OwnedItem\", spell._id))\n\n        item.data.castings.value = 0;\n\n        actor.updateEmbeddedEntity(\"OwnedItem\", item);\n    }\n\n    applyHealing(token, true);\n\n    var templateData = {\n        actor: actor\n    };\n\n    let chatData = {\n        user: game.user._id,\n        speaker: {\n            actor: actor._id,\n            token: actor.token,\n            alias: actor.name\n        }\n    };\n\n    let template = 'systems/demonlord/templates/chat/rest.html';\n    renderTemplate(template, templateData).then(content => {\n        chatData.content = content;\n        ChatMessage.create(chatData);\n    });\n}\n\nfunction applyHealing(token, fullHealingRate) {\n    const actor = token.actor;\n\n    if (token.data.actorData.data?.characteristics != undefined) {\n        let tokenData = duplicate(token.data);\n        let hp = tokenData.actorData.data.characteristics.health;\n        let rate = tokenData.actorData.data.characteristics.health.healingrate;\n\n        if (game.settings.get('demonlord', 'reverseDamage')) {\n            let newdamage = parseInt(hp.value) + (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage > hp.max)\n                newdamage = parseInt(hp.max);\n\n            hp.value = newdamage;\n        } else {\n            let newdamage = parseInt(hp.value) - (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage < 0)\n                newdamage = 0;\n\n            hp.value = newdamage;\n        }\n\n        token.update(tokenData);\n    } else {\n        let actorData = duplicate(token.actor.data);\n        let hp = actorData.data.characteristics.health;\n        let rate = actorData.data.characteristics.health.healingrate;\n\n        if (game.settings.get('demonlord', 'reverseDamage')) {\n            let newdamage = parseInt(hp.value) + (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage > hp.max)\n                newdamage = parseInt(hp.max);\n\n            hp.value = newdamage;\n        } else {\n            let newdamage = parseInt(hp.value) - (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage < 0)\n                newdamage = 0;\n\n            hp.value = newdamage;\n        }\n\n        token.actor.update(actorData);\n    }\n}\n\nfor (let token of canvas.tokens.controlled) {\n    restActor(token);\n}","author":"Sd8TaawsSgOTEPU7","img":"systems/demonlord/icons/skills/time.png","actorIds":[]}
{"_id":"01XhF99RNUqVwMiW","name":"Heal","permission":{"default":0,"Sd8TaawsSgOTEPU7":3},"type":"script","flags":{},"scope":"global","command":"// Heals the selected player token with Healing Rate or half Healing Rate.\n\nfunction applyHealing(token, fullHealingRate) {\n    const actor = token.actor;\n    let healed = 0;\n\n    if (token.data.actorData.data?.characteristics != undefined) {\n        let tokenData = duplicate(token.data);\n        let hp = tokenData.actorData.data.characteristics.health;\n        let rate = tokenData.actorData.data.characteristics.health.healingrate;\n\n        if (game.settings.get('demonlord', 'reverseDamage')) {\n            let newdamage = parseInt(hp.value) + (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage > hp.max) {\n                newdamage = parseInt(hp.max);\n                healed = newdamage - hp.max;\n            }\n            hp.value = newdamage;\n        } else {\n            let newdamage = parseInt(hp.value) - (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage < 0) {\n                newdamage = 0;\n                healed = parseInt(hp.value);\n            }\n\n            hp.value = newdamage;\n        }\n\n        token.update(tokenData);\n    } else {\n        let actorData = duplicate(token.actor.data);\n        let hp = actorData.data.characteristics.health;\n        let rate = actorData.data.characteristics.health.healingrate;\n\n        if (game.settings.get('demonlord', 'reverseDamage')) {\n            let newdamage = parseInt(hp.value) + (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage > hp.max) {\n                newdamage = parseInt(hp.max);\n                healed = newdamage - hp.max;\n            }\n            hp.value = newdamage;\n        } else {\n            let newdamage = parseInt(hp.value) - (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage < 0) {\n                newdamage = 0;\n                healed = parseInt(hp.value);\n            }\n\n            hp.value = newdamage;\n        }\n\n        token.actor.update(actorData);\n    }\n\n    var templateData = {\n        actor: actor,\n        data: {\n            healing: {\n                value: healed\n            }\n        }\n    };\n\n    let chatData = {\n        user: game.user._id,\n        speaker: {\n            actor: actor._id,\n            token: actor.token,\n            alias: actor.name\n        }\n    };\n\n    let template = 'systems/demonlord/templates/chat/heal.html';\n    renderTemplate(template, templateData).then(content => {\n        chatData.content = content;\n        ChatMessage.create(chatData);\n    });\n\n}\n\nlet applyChanges = false;\nnew Dialog({\n    title: game.i18n.localize('DL.MacroHealTitle'),\n    content: `\n    <form>\n      <div class=\"form-group\">\n        <label>` + game.i18n.localize('DL.MacroHealChoose') + `</label><br/>\n</div>\n<div class=\"form-group\">\n<table>\n<tr>\n<td>\n<input type=\"radio\" name=\"healingrate\" id=\"true\" checked />\n                        <label for=\"true\">` + game.i18n.localize('DL.MacroHealHealingRate') + `</label>\n<td/>\n</tr>\n<tr>\n<td>\n<input type=\"radio\" name=\"healingrate\" id=\"false\" />\n                        <label for=\"false\">` + game.i18n.localize('DL.MacroHealHalfHealingRate') + `</label>\n<td/>\n</tr>\n</table>\n                        \n                        \n</div>\n    </form>\n    `,\n    buttons: {\n        yes: {\n            icon: \"<i class='fas fa-check'></i>\",\n            label: game.i18n.localize('DL.MacroHealApplyHealing'),\n            callback: () => applyChanges = true\n        },\n        no: {\n            icon: \"<i class='fas fa-times'></i>\",\n            label: game.i18n.localize('DL.MacroCancel')\n        },\n    },\n    default: \"yes\",\n    close: html => {\n        if (applyChanges) {\n            for (let token of canvas.tokens.controlled) {\n                let fullHealingRate = html.find('[name=\"healingrate\"]')[0].checked || false;\n\n                applyHealing(token, fullHealingRate);\n            }\n        }\n    }\n}).render(true);","author":"Sd8TaawsSgOTEPU7","img":"systems/demonlord/icons/skills/heal.png","actorIds":[]}
{"_id":"01XhF99RNUqVwMiW","name":"Heal","permission":{"default":0,"Sd8TaawsSgOTEPU7":3},"type":"script","flags":{},"scope":"global","command":"// Heals the selected player token with Healing Rate or half Healing Rate.\n\nfunction applyHealing(token, fullHealingRate) {\n    const actor = token.actor;\n    let healed = 0;\n\n    if (token.data.actorData.data?.characteristics != undefined) {\n        let tokenData = duplicate(token.data);\n        let hp = tokenData.actorData.data.characteristics.health;\n        let rate = tokenData.actorData.data.characteristics.health.healingrate;\n\n        if (game.settings.get('demonlord', 'reverseDamage')) {\n            let newdamage = parseInt(hp.value) + (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage > hp.max) {\n                newdamage = parseInt(hp.max);\n                healed = newdamage - hp.max;\n            }\n            hp.value = newdamage;\n        } else {\n            let newdamage = parseInt(hp.value) - (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage < 0) {\n                newdamage = 0;\n                healed = parseInt(hp.value);\n            }\n\n            hp.value = newdamage;\n        }\n\n        token.update(tokenData);\n    } else {\n        let actorData = duplicate(token.actor.data);\n        let hp = actorData.data.characteristics.health;\n        let rate = actorData.data.characteristics.health.healingrate;\n\n        if (game.settings.get('demonlord', 'reverseDamage')) {\n            let newdamage = parseInt(hp.value) + (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage > hp.max) {\n                newdamage = parseInt(hp.max);\n                healed = newdamage - hp.max;\n            }\n            hp.value = newdamage;\n        } else {\n            let newdamage = parseInt(hp.value) - (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            healed = (fullHealingRate ? parseInt(rate) : parseInt(rate / 2));\n            if (newdamage < 0) {\n                newdamage = 0;\n                healed = parseInt(hp.value);\n            }\n\n            hp.value = newdamage;\n        }\n\n        token.actor.update(actorData);\n    }\n\n    var templateData = {\n        actor: actor,\n        data: {\n            healing: {\n                value: healed\n            }\n        }\n    };\n\n    let chatData = {\n        user: game.user._id,\n        speaker: {\n            actor: actor._id,\n            token: actor.token,\n            alias: actor.name\n        }\n    };\n\n    let template = 'systems/demonlord/templates/chat/heal.html';\n    renderTemplate(template, templateData).then(content => {\n        chatData.content = content;\n        ChatMessage.create(chatData);\n    });\n\n}\n\nlet applyChanges = false;\nnew Dialog({\n    title: game.i18n.localize('DL.MacroHealTitle'),\n    content: `\n    <form>\n      <div class=\"form-group\">\n        <label>` + game.i18n.localize('DL.MacroHealChoose') + `</label><br/>\n</div>\n<div class=\"form-group\">\n<table>\n<tr>\n<td>\n<input type=\"radio\" name=\"healingrate\" id=\"true\" checked />\n                        <label for=\"true\">` + game.i18n.localize('DL.MacroHealHealingRate') + `</label>\n<td/>\n</tr>\n<tr>\n<td>\n<input type=\"radio\" name=\"healingrate\" id=\"false\" />\n                        <label for=\"false\">` + game.i18n.localize('DL.MacroHealHalfHealingRate') + `</label>\n<td/>\n</tr>\n</table>\n                        \n                        \n</div>\n    </form>\n    `,\n    buttons: {\n        yes: {\n            icon: \"<i class='fas fa-check'></i>\",\n            label: game.i18n.localize('DL.MacroHealApplyHealing'),\n            callback: () => applyChanges = true\n        },\n        no: {\n            icon: \"<i class='fas fa-times'></i>\",\n            label: game.i18n.localize('DL.MacroCancel')\n        },\n    },\n    default: \"yes\",\n    close: html => {\n        if (applyChanges) {\n            for (let token of canvas.tokens.controlled) {\n                let fullHealingRate = html.find('[name=\"healingrate\"]')[0].checked || false;\n\n                applyHealing(token, fullHealingRate);\n            }\n        }\n    }\n}).render(true);","author":"Sd8TaawsSgOTEPU7","img":"systems/demonlord/icons/skills/heal.png","actorIds":[]}
